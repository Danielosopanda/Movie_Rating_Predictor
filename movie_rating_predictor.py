# -*- coding: utf-8 -*-
"""Movie_Rating_Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18VBq3HlRE5M4ExIRcIqaeWX8ELl6KYgY

# Supervised learning model to predict rating of movies

## Initial Settings

### Importing libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import learning_curve
from sklearn.model_selection import cross_val_score

"""### Reading the CSV"""

df = pd.read_csv("movies_dataframe.csv", lineterminator="\n").dropna()

#remove the lines with rating 0
df = df.loc[df['Vote_Average'] != 0]

df.head(3)

"""## Feature engineering: Preparing the data for analysis

### Setting Year Column
"""

df['Release_Date'] = pd.to_datetime(df['Release_Date'], errors='coerce')
df['Release_Year'] = df['Release_Date'].dt.year
df['Release_Month'] = df['Release_Date'].dt.month

df.head()

"""### Setting the Genres"""

# Split the genres by commas
genres_split = df['Genre'].str.split(', ', expand=True)

# Add stacked genders to the dataframe
df_expanded = df.drop(columns=['Genre']).join(genres_split.stack().reset_index(drop=True, level=1).rename('Genre'))

# One-Hot encode the genres
df_encoded = pd.get_dummies(df_expanded, columns=['Genre'], drop_first=True).dropna()

# Sum the lines of the same movies which have more than 1 genre
df_grouped = df_encoded.groupby(['Title', 'Release_Date', 'Overview', 'Popularity', 'Vote_Count', 'Vote_Average', 'Original_Language', 'Poster_Url', 'Release_Year', 'Release_Month'], as_index=False).agg('sum')
df_grouped.head()

"""###Analyzing the relationship between the average vote and the year of release"""

plt.figure(figsize=(10, 6))
plt.scatter(df_grouped['Release_Year'], df_grouped['Vote_Average'], alpha=.5, s=15)
plt.xlabel('Release Year')
plt.ylabel('Average Vote')
plt.title('Movie Ratings Over Time')
plt.grid(True)
plt.show()

vote_monthly = df_grouped.groupby('Release_Year')['Vote_Average'].mean()

# Plot graph of the vote avg as a function of the year
fig, ax = plt.subplots()
ax.plot(vote_monthly, linewidth=2.0)
plt.title('Average of votes as a function of the Release Year')
plt.xlabel('Release Year')
plt.ylabel('Average of votes')

"""###Function to calculate the average vote per genre weighted by the number of votes

"""

def weighted_average(df, genre_col):
    weighted_sum = (df['Vote_Average'] * df['Vote_Count']).sum()
    total_votes = df['Vote_Count'].sum()
    return weighted_sum / total_votes if total_votes != 0 else 0

"""###Analyzing the relationship between the average vote and genre"""



genre_columns = [col for col in df_grouped.columns if col.startswith('Genre_')]
average_ratings = {genre: weighted_average(df_grouped[df_grouped[genre] > 0], genre) for genre in genre_columns}

#Convert dictionary to a DataFrame for easier plotting
average_ratings_df = pd.DataFrame.from_dict(average_ratings, orient='index', columns=['Average_Rating'])

# Sort the DataFrame by grade average in ascending order
average_ratings_df = average_ratings_df.sort_values(by='Average_Rating')

plt.figure(figsize=(12, 8))
sns.boxplot(x='Genre', y='Vote_Average', data=df_expanded)
plt.xticks(rotation=90)
plt.title('Average rating by movie genre')
plt.xlabel('Genre')
plt.ylabel('Average rating')
plt.show()

"""##Training and testing

###Configuring x and y
"""

x = df_grouped[["Release_Year", "Release_Month", "Genre_Adventure", 'Genre_Animation', 'Genre_Comedy',
       'Genre_Crime', 'Genre_Documentary', 'Genre_Drama', 'Genre_Family',
       'Genre_Fantasy', 'Genre_History', 'Genre_Horror', 'Genre_Music',
       'Genre_Mystery', 'Genre_Romance', 'Genre_Science Fiction',
       'Genre_TV Movie', 'Genre_Thriller', 'Genre_War', 'Genre_Western']]

y = df_grouped["Vote_Average"]

x

"""### Split the data into training and test data"""

xTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size=0.2)

"""### Create and train the model"""

model = LinearRegression()
model.fit(xTrain, yTrain)

"""## Reviewing the quality of the model

### RMSE and R²
"""

## To do: Calculate accuracy data of the model (train and test acc., overfitting, etc.)

# predict test
yTrainPred = model.predict(xTrain)
yTestPred = model.predict(xTest)

# Calculate RMSE and R² for the train data
train_rmse = mean_squared_error(yTrain, yTrainPred, squared=False)
train_r2 = r2_score(yTrain, yTrainPred)

# Calculate RMSE and R² for the test data
test_rmse = mean_squared_error(yTest, yTestPred, squared=False)
test_r2 = r2_score(yTest, yTestPred)

# Print results
print("Train RMSE:", train_rmse)
print("Train R²:", train_r2)
print("Test RMSE:", test_rmse)
print("Test R²:", test_r2)

"""### Cross validation"""

# Perform 5-fold cross-validation
scores = cross_val_score(model, x, y, cv=5)

# Print the scores for each fold
print("Cross-validation scores:", scores)

# Print the mean score and standard deviation
print("Average cross-validation score:", scores.mean())
print("Standard deviation:", scores.std())

"""### Learning curves"""

train_sizes, train_scores, val_scores = learning_curve(model, x, y, cv=5)

plt.plot(train_sizes, np.mean(train_scores, axis=1), label='Training score')
plt.plot(train_sizes, np.mean(val_scores, axis=1), label='Validation score')
plt.xlabel('Training set size')
plt.ylabel('Score')
plt.title('Learning Curves')
plt.legend()
plt.show()

"""## Predicting a new movie

### Function to convert month number to string
"""

def getMovieMonth(month):
  if month == 1:
    return "January"
  elif month == 2:
    return "February"
  elif month == 3:
    return "March"
  elif month == 4:
    return "April"
  elif month == 5:
    return "May"
  elif month == 6:
    return "June"
  elif month == 7:
    return "July"
  elif month == 8:
    return "August"
  elif month == 9:
    return "September"
  elif month == 10:
    return "October"
  elif month == 11:
    return "November"
  elif month == 12:
    return "December"
  else:
    return "Unknown"

"""### Function to show movie genres"""

def showMovieGenres(movie):
  if movie[2] == 1:
    print("- Adventure")
  if movie[3] == 1:
    print("- Animation")
  if movie[4] == 1:
    print("- Comedy")
  if movie[5] == 1:
    print("- Crime")
  if movie[6] == 1:
    print("- Documentary")
  if movie[7] == 1:
    print("- Drama")
  if movie[8] == 1:
    print("- Family")
  if movie[9] == 1:
    print("- Fantasy")
  if movie[10] == 1:
    print("- History")
  if movie[11] == 1:
    print("- Horror")
  if movie[12] == 1:
    print("- Music")
  if movie[13] == 1:
    print("- Mystery")
  if movie[14] == 1:
    print("- Romance")
  if movie[15] == 1:
    print("- Science Fiction")
  if movie[16] == 1:
    print("- TV Movie")
  if movie[17] == 1:
    print("- Thriller")
  if movie[18] == 1:
    print("- War")
  if movie[19] == 1:
    print("- Western")

"""### Get information about the movie"""

dummy_movie = []

dummy_movie_name = input("Enter the name of the movie:\n")
dummy_movie_month = ""

dummy_movie.append(int(input("Enter the year of release:\n")))
dummy_movie.append(int(input("Enter the month of release:\n")))
dummy_movie.append(input("Is the movie about Adventure? Y/N\n").lower())
dummy_movie.append(input("Is the movie an Animation? Y/N\n").lower())
dummy_movie.append(input("Is the movie about Comedy? Y/N\n").lower())
dummy_movie.append(input("Is the movie about Crime? Y/N\n").lower())
dummy_movie.append(input("Is the movie a Documentary? Y/N\n").lower())
dummy_movie.append(input("Is the movie about Drama? Y/N\n").lower())
dummy_movie.append(input("Is the movie for all the family? Y/N\n").lower())
dummy_movie.append(input("Is the movie about Fantasy? Y/N\n").lower())
dummy_movie.append(input("Is the movie based on History? Y/N\n").lower())
dummy_movie.append(input("Is the movie about Horror? Y/N\n").lower())
dummy_movie.append(input("Is the movie about Music? Y/N\n").lower())
dummy_movie.append(input("Is the movie about Mistery? Y/N\n").lower())
dummy_movie.append(input("Is the movie about Romance? Y/N\n").lower())
dummy_movie.append(input("Is the movie about Science Fiction? Y/N\n").lower())
dummy_movie.append(input("Is the movie about a TV Movie? Y/N\n").lower())
dummy_movie.append(input("Is the movie about Thriller? Y/N\n").lower())
dummy_movie.append(input("Is the movie about War? Y/N\n").lower())
dummy_movie.append(input("Is the movie about Western? Y/N\n").lower())

for i in range(2, len(dummy_movie)):
  if dummy_movie[i] == 'y':
    dummy_movie[i] = 1
  else:
    dummy_movie[i] = 0

# Get month's name
dummy_movie_month = getMovieMonth(dummy_movie[1])

"""### Showing the result"""

print("Movie name:", dummy_movie_name, "\n")
print("Date of release: ", dummy_movie_month, "of", dummy_movie[0], "\n")

print("Genres:")
showMovieGenres(dummy_movie)

print("\nPredicting...")
dummy_movie_prediction = model.predict([dummy_movie]).round(2)

print("\nPredicted rating:", dummy_movie_prediction[0], "/ 10\n")